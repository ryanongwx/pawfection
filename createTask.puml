@startuml
class "CreateTask" {
  +GlobalKey<FormState> formKey
  +TaskRepository taskRepository
  +PetRepository petRepository
  +UserRepository userRepository
  +StorageRepository storageRepository
  +TaskService taskService
  +PetService petService
  +UserService userService
  -dynamic _form
  +dynamic alertmessage
  +List<File?> resources
  +String others
  +bool showTextField
  -FirebaseAuth _auth
  +List<String> categories
  +Widget build()
  +Widget buildPetList()
  +Widget buildVolunteerList()
  -List<Widget> _buildForm()
  -List<Widget> _buildCupertinoForm()
  -void _handleResourcesAdded()
  +dynamic pickVideo()
}

"CreateTaskView" o-- "TaskRepository"
"CreateTaskView" o-- "PetRepository"
"CreateTaskView" o-- "UserRepository"
"CreateTaskView" o-- "StorageRepository"
"CreateTaskView" o-- "TaskService"
"CreateTaskView" o-- "PetService"
"CreateTaskView" o-- "UserService"
"CreateTaskView" o-- "FirebaseAuth"

class "UpdateTaskView" {
  +GlobalKey<FormState> formKey
  +TaskRepository taskRepository
  +TaskService taskService
  +StorageRepository storageRepository
  +UserRepository userRepository
  +PetRepository petRepository
  +PetService petService
  +UserService userService
  +List<String?> resources
  -dynamic _form
  +dynamic alertmessage
  +String others
  +bool showTextField
  +List<String> categories
  +void initState()
  +Widget buildPetList()
  +Widget buildVolunteerList()
  -void _showDialog()
  +Widget build()
  -List<Widget> _buildForm()
  -List<Widget> _buildCupertinoForm()
  +dynamic pickVideo()
  +File convertImageToFile()
}

"UpdateTaskView" o-- "TaskRepository"
"UpdateTaskView" o-- "PetRepository"
"UpdateTaskView" o-- "UserRepository"
"UpdateTaskView" o-- "StorageRepository"
"UpdateTaskView" o-- "TaskService"
"UpdateTaskView" o-- "PetService"
"UpdateTaskView" o-- "UserService"
"UpdateTaskView" o-- "FirebaseAuth"

class "TaskItem" {
  +Task task
  +PetService petService
  +Icon showCategoryIcon()
  +Widget build()
}

"TaskItem" o-- "TaskModel"
"TaskItem" o-- "PetService"

class "FirebaseAuth" {
  Abstracted
}

class "UserRepository" {
  +CollectionReference<Object?> usercollection
  +UserService userService
  +Stream<QuerySnapshot<Object?>> users
  +dynamic findUserByUUID()
  +void addUser()
  +void updateUser()
  +void deleteUser()
  +dynamic getUserList()
  +dynamic currentUser()
}

class "PetRepository" {
  +CollectionReference<Object?> petCollection
  +Stream<QuerySnapshot<Object?>> pets
  +dynamic addPetRepo()
  +void updatePetRepo()
  +void deletePetRepo()
  +dynamic fetchAllPets()
}

class "TaskRepository" {
  +CollectionReference<Object?> taskCollection
  +Stream<QuerySnapshot<Object?>> tasks
  +void updateTaskRepo()
  +void deleteTaskRepo()
  +dynamic addTaskRepo()
  +dynamic fetchAllTasks()
}

class "StorageRepository" {
  -FirebaseStorage _storage
  +dynamic uploadImageToStorage()
}

class "UserService" {
  +UserRepository userRepository
  +User userFromJson()
  +Map<String, dynamic> userToJson()
  +User fromSnapshot()
  +List<User> snapshotToUserList()
  +List<User> snapshotToUserListModified()
  +void updateUser()
  +void updateUserUid()
  +void deleteUser()
  +dynamic addUser()
  +void addUserWithId()
  +dynamic getUserList()
  +dynamic findUserByUUID()
  +dynamic findUserByUUIDs()
  +dynamic findUserByUsername()
  +dynamic currentUser()
}

"UserService" o-- "UserRepository"
"UserService" o-- "UserModel"

class "TaskService" {
  +TaskRepository taskRepository
  +Task taskFromJson()
  +Map<String, dynamic> taskToJson()
  +Task taskFromJsonCloudFunction()
  +Task fromSnapshot()
  +List<Task> snapshotToTaskList()
  +List<Task> snapshotToTaskListModified()
  +void updateTask()
  +void deleteTask()
  +dynamic addTask()
  +dynamic findTaskByTaskID()
  +bool isAvailableWithinDeadline()
}

"TaskService" o-- "TaskRepository"
"TaskService" o-- "TaskModel"

class "PetService" {
  +PetRepository petRepository
  +Pet petFromJson()
  +Map<String, dynamic> petToJson()
  +Pet fromSnapshot()
  +List<Pet> snapshotToPetList()
  +List<Pet> snapshotToPetListModified()
  +void updatePet()
  +void deletePet()
  +dynamic addPet()
  +dynamic findPetByPetID()
  +dynamic getPetList()
  +dynamic findPetByPetname()
}

"PetService" o-- "PetRepository"
"PetService" o-- "PetModel"

class "TaskModel" {
  +String? referenceId
  +String name
  +String createdby
  +String? assignedto
  +String description
  +String category
  +String? categoryothers
  +String status
  +List<String?> resources
  +String contactperson
  +String contactpersonnumber
  +String? feedback
  +List<Timestamp?> deadline
  +String? pet
  +List<String?> requests
  +String toString()
}

class "PetModel" {
  +String? referenceId
  +String name
  +String? breed
  +String? description
  +String? thingstonote
  +String profilepicture
  +String toString()
}

class "TaskModel" {
  +String? referenceId
  +String name
  +String createdby
  +String? assignedto
  +String description
  +String category
  +String? categoryothers
  +String status
  +List<String?> resources
  +String contactperson
  +String contactpersonnumber
  +String? feedback
  +List<Timestamp?> deadline
  +String? pet
  +List<String?> requests
  +String toString()
}
@enduml